-- Only validations are done here

DROP PROCEDURE IF EXISTS SINGLEORDERSPROCEDURE;
DELIMITER !
CREATE PROCEDURE SINGLEORDERSPROCEDURE(FOODPAR VARCHAR(20), QUANTITY INT, OUT ERROR BOOLEAN, OUT COMMENTS VARCHAR(100))
BEGIN

SET ERROR = TRUE;
SET @FOODID = (SELECT ID FROM FOOD WHERE FOODNAME = FOODPAR);

SET @TYPEID = (SELECT TYPEID FROM FOODTOTYPEMAP WHERE FOODID = 9 AND TYPEID IN (SELECT ID FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND));-- COFFEE AND TEA MAPED TO MORNING AND EVENING

SET @SESSIONNAME = (SELECT SESSIONNAME FROM TYPEOFFOOD WHERE ID = @TYPEID);
SET @SESSIONSTART = (SELECT SESSIONSTART FROM TYPEOFFOOD WHERE @TYPEID = TYPEOFFOOD.ID);
SET @SESSIONEND = (SELECT SESSIONEND FROM TYPEOFFOOD WHERE @TYPEID = TYPEOFFOOD.ID);
SET @NOOFSEATS = (SELECT NUMBEROFSEATS FROM CONFIGURATION);
SET @SESSIONLIMIT = (SELECT QTY FROM FOODTOTYPEMAP WHERE TYPEID = @TYPEID AND FOODID = @FOODID);
SET @CURRENTSESSIONSALES = (SELECT IFNULL(SUM(QTY),0) FROM SUBORDERS WHERE FOODID = @FOODID AND ORDERSID IN (SELECT ID FROM ORDERS WHERE DATEDIFF(CURRENT_DATE(), TIMEANDDATE) = 0/*TODAYS ORDERS*/ AND ORDERSSTATUS = 1/*ORDERED FOOD*/)); -- AMOUNT OF SALES OF THAT PARTICULAR ITEM

IF EXISTS(SELECT ID FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND) -- FOR NULL SESSION
THEN
	IF EXISTS (SELECT FOODNAME FROM FOOD WHERE FOODNAME = FOODPAR) -- WHEATHER WE PROVIDE THE ASKED FOOD OR NOT
	THEN

		IF EXISTS(SELECT TYPEID FROM FOODTOTYPEMAP WHERE FOODID = @FOODID AND TYPEID IN (SELECT ID FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND))-- WHEATHER THE FOOD IS AVAILABLE IN THAT SESSION OR NOT
	THEN
			IF QUANTITY > 0 -- WHEATHER THE GIVEN QUANTITY IS GREATER THAN ZERO OR NOT
			THEN
				IF @SESSIONLIMIT >= @CURRENTSESSIONSALES -- WHEATHER THE AMOUNT OF FOOD PREPARED HAS BEEN EXCEEDED OR WE CAN PROVIDE MORE FROM STOCK
				THEN
				--	IF EXISTS(SELECT SESSIONNAME FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND)-- CURRENTSESSION
				--	THEN
					--	IF CURRENT_TIME() BETWEEN @SESSIONSTART AND @SESSIONEND
					--	THEN
								/*START TRANSACTION;
								SET AUTOCOMMIT=0;*/
									SET ERROR = FALSE;
								/*COMMIT;*/
					--	ELSE
							/*IF (SELECT COUNT(SESSIONNAME) FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND) = 1
						THEN*/
						--		SELECT CONCAT(FOODPAR, " IS NOT SERVED DURING THIS HOUR!!!!");
							-- SELECT CONCAT(FOODPAR, " IS ONLY SEVERED DURING ", @SESSIONNAME," WHICH STARTS AT ", @SESSIONSTART, " & ENDS AT ", @SESSIONEND," !!!!", "BUT YOU CAN ORDER ANY FOOD FROM ", (SELECT SESSIONNAME FROM TYPEOFFOOD WHERE CURRENT_TIME() BETWEEN SESSIONSTART AND SESSIONEND)/*@CURRENTSESSIONNAME*/, " NOW!!!!"); -- NEED CHANGE HERE
						/*ELSE
							SELECT CONCAT(FOODPAR, " IS ONLY SEVERED DURING ", @SESSIONNAME," WHICH STARTS AT ", @SESSIONSTART, " & ENDS AT ", @SESSIONEND," !!!!");
						END IF;*/
					
					--	END IF;		
				--	ELSE
				--		SELECT CONCAT("PLEASE DO WAIT FOR US TO PREPARE FOR THE NEXT SESSION!!!!");
				--	END IF;
				ELSE
					SET COMMENTS = "MAAVU THEENDHUDICHU!!!!";
				END IF;
			ELSE
				SET COMMENTS = "ENTER A VALID QUANTITY U DONT HAVE THE AUTHORITY TO ADD STOCK!!!!";
			END IF;
		ELSE
			SET COMMENTS = CONCAT(FOODPAR, ' IS NOT SERVED DURING THIS HOUR!!!!');
		END IF;
	ELSE
		SET COMMENTS = CONCAT("WE  DONT SERVE ", FOODPAR, " HERE");
	END IF;
ELSE
	SET COMMENTS = "PLEASE DO WAIT FOR THE NEXT SESSION TO START";
END IF;
END !
DELIMITER ;

/*CALL SINGLEORDERSPROCEDURE('IDLY', 3, @ERROR, @COMMENTS);
SELECT @ERROR;
SELECT @COMMENTS;
-- CALL ORDERSPROCEDURE('COFFEE', 3, 1);*/
